Usage dependencies
===============================================================================

To use Cytoscape Web in your HTML document, you must include the following JS:

	* jQuery 1.3.2 or 1.6
	* 2D.js
	* jquery.color.js
	* jquery.svg.js
	* jquery.cytoscapeweb.all.js or
		* jquery.cytoscapeweb.js
		* at least 1 renderer (e.g. jquery.cytoscapeweb.renderer.svg.js)
		* at least 1 layout (e.g. jquery.cytoscapeweb.layout.grid.js)
		* any exporters you want to use
		* any importers you want to use

jquery.cytoscapeweb.all.js contains all Cytoscape Web code, including all
layouts, renderers, and so on.  If you don't want to use a different version
of the libraries used by Cytoscape Web, you can use
jquery.cytoscapeweb.withdeps.min.js.



We'd like to thank the academy...
===============================================================================

A big thanks goes out to Keith Wood for his jQuery SVG library, which is used
in Cytoscape Web's default SVG renderer implementation.  You can find out more
about his library at his website (http://keith-wood.name/svg.html).

We would also like to thank Mark Gibson for his work on the jQuery color
library, which is used in our continuous mapper calculations.  You can find out
more about Mark's library at his website
(http://www.adaptavist.com/display/jQuery/Colour+Library).

We used Kevin Lindsey's SVG intersection library to calculate the positioning
of some objects, like edges.  You can find his library at his website
(http://www.kevlindev.com/gui/math/intersection).

We used Brandon Aaron's mouse wheel library for providing easy cross-browser
support for zooming with the mouse wheel in the SVG renderer.  You can find out
more about his library at his website (http://brandonaaron.net).


Build dependencies
===============================================================================

You need the following installed in order to build successfully.

	* cat
	* cp
	* java 1.5 or newer (for YUI compressor)
	* make
	* mkdir
	* mv
	* printf
	* rm
	* sed
	* zip (only for `zip` target)
	
Their paths are defined in `Makefile`, so you can revise the paths to these
executables and still run `make` successfully.  You should be able to run
`make` without modification on any well configured Unix-like machine, such as
Linux or Mac OS X---Mac needs XCode with command line tools installed.



Build instructions
===============================================================================

Run `make` in the console.  The targets are:

	all : build everything (default)
	minify : build the production minified JS
	zip : minify and make a ZIP file for release
	clean : deletes built files

A note to developers:

For `zip`, make sure to define `VERSION` in `Makefile` if you're making an
actual release ZIP.

In the `Makefile`, you can specify the JS files to include in the built ZIP in
the `JSFILES` variable.  The order you specify there is the same as the order
the files are included in the all.min.js file.  Order your dependencies 
accordingly.



Tests
===============================================================================

QUnit tests are found in the `tests` directory.  Each HTML file shares the
test suite but redefines which JS files are used.  In this way, you can test
with different versions of jQuery or different falvours of the library
(minified, plain, or combined and minified).
